version: "3.9"
services:

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    image: auth-service:1.0
    container_name: auth_service
    env_file:
      - ./auth/.env
    ports:
      - "8002:8002"
    depends_on:
      - user-management
      - rabbitmq
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  user-management:
    build:
      context: ./user-management
      dockerfile: Dockerfile
    image: user-management-service:1.0
    container_name: user_management_service
    env_file:
      - ./user-management/.env
    ports:
      - "8001:8001"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  email:
    build:
      context: ./email
      dockerfile: Dockerfile
    image: email-service:1.0
    container_name: email_service
    env_file:
      - ./email/.env
    depends_on:
      - rabbitmq
    networks:
      - user_management_network
    
  files_management:
    build:
      context: ./files_management
      dockerfile: Dockerfile
    image: files-management-service:1.0
    container_name: files_management_service
    env_file: 
      - ./files_management/.env
    ports:
      - "8003:8003"
    depends_on:
      - minio
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  quality_control:
    build:
      context: ./quality-control
      dockerfile: Dockerfile
    image: quality-control-service:1.0
    container_name: quality_control_service
    env_file:
      - ./quality-control/.env
    depends_on:
      - rabbitmq
      - files_management
    networks:
      - user_management_network
  
  filtering_fastq_files:
    build:
      context: ./filtering-fastq-files
      dockerfile: Dockerfile
    image: filtering-fastq-files-service:1.0
    container_name: filtering_fastq_files_service
    env_file:
      - ./filtering-fastq-files/.env
    depends_on:
      - rabbitmq
      - files_management
    networks:
      - user_management_network
    
  alignment_fastq_files:
    build:
      context: ./alignment-fastq-files
      dockerfile: Dockerfile
    image: alignment-fastq-files-service:1.0
    container_name: alignment_fastq_files_service
    env_file:
      - ./alignment-fastq-files/.env
    depends_on:
      - rabbitmq
      - files_management
    networks:
      - user_management_network

  quantification:
    build:
      context: ./quantification
      dockerfile: Dockerfile
    image: quantification-service:1.0
    container_name: quantification_service
    env_file:
      - ./quantification/.env
    depends_on:
      - rabbitmq
      - files_management
    networks:
      - user_management_network
    
  differential_expression:
    build:
      context: ./differential-expression
      dockerfile: Dockerfile
    image: differential-expression-service:1.0
    container_name: differential_expression_service
    env_file:
      - ./differential-expression/.env
    depends_on:
      - rabbitmq
      - files_management
    networks:
      - user_management_network
    
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    image: gateway-service:1.0
    container_name: gateway_service
    env_file:
      - ./gateway/.env
    ports:
      - "8000:8000"
    depends_on:
      - auth
      - user-management
      - email
      - quality_control
      - filtering_fastq_files
      - alignment_fastq_files
      - differential_expression
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    image: minio/minio:latest
    container_name: minio
    env_file:
      - ./files_management/.env
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    networks:
      - user_management_network

  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - user_management_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  mysql:
    image: mysql:8.0-oracle
    container_name: mysql_db
    ports:
      - "3306:3306"
    env_file:
      - ./user-management/.env
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - user_management_network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -hlocalhost -uroot -p$$DB_PASSWORD || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 10s

volumes:
  mysql_data:
  rabbitmq_data:
  minio_data:

networks:
  user_management_network:
    driver: bridge
